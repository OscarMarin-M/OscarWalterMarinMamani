import socket, sys
from struct import *

def eth_addr (a) :
  	b = "%.2x:%.2x:%.2x:%.2x:%.2x:%.2x" % (ord(a[0]) , ord(a[1]) , ord(a[2]), ord(a[3]), ord(a[4]) , ord(a[5]))
 	return b
try:
	s = socket.socket( socket.AF_PACKET , socket.SOCK_RAW , socket.ntohs(0x0003))
except socket.error:

	sys.exit()
while True:
	packet = s.recvfrom(65565)
	

	packet = packet[0]
	eth_length = 14
	
	eth_header = packet[:eth_length]
	eth = unpack('!6s6sH' , eth_header)
	eth_protocol = socket.ntohs(eth[2])
	print('=========Cabecera ETHERNET==========')
	print ('Destination MAC : ' + eth_addr(packet[0:6]))
	print(' Source MAC : ' + eth_addr(packet[6:12]))
	print(' Protocol : ' + str(eth_protocol))

	if eth_protocol == 8:
		ip_header = packet[eth_length:20+eth_length]
		iph = unpack('!BBHHHBBH4s4s' , ip_header)

		version_ihl = iph[0]
		version = version_ihl >> 4
		ihl = version_ihl & 0xF
		iph_length = ihl * 4
		#ip_tos =iph[1]
    	#ip_len =iph[2]
	    #ip_id =iph[3]
	    #ip_off =iph[4]
	    #ttl = iph[5]
		protocol = iph[6]
   		ip_sum =iph[7]
		s_addr = socket.inet_ntoa(iph[8])
		d_addr = socket.inet_ntoa(iph[9])
		print('============Cabecera IP=============')
		print ('Version : ' + str(version))
		print(' IP Header Length : ' + str(ihl))
		#print('Type of service : '+ str(ip_tos))
    	#print('IP Total Length: ',ip_len, 'Dwords', str(ip_len*32//8),'bytes')
		#print('Identification: '+ip_id)
		#print(' TTL : ' + str(ttl))
		print(' Protocol : ' + str(protocol))
		
		print(' Source Address : ' + str(s_addr))
		print(' Destination Address : ' + str(d_addr))
		
		#TCP protocol
		if protocol == 6 :
			t = iph_length + eth_length
			tcp_header = packet[t:t+20]

			tcph = unpack('!HHLLBBHHH' , tcp_header)
			
			source_port = tcph[0]
			dest_port = tcph[1]
			sequence = tcph[2]
			acknowledgement = tcph[3]
			doff_reserved = tcph[4]
			tcph_length = doff_reserved >> 4
			tcph_flags=tcph[5]
			print('==========Cabecera TCP===========')
			print ('Source Port : ' + str(source_port))
			print(' Dest Port : ' + str(dest_port))
			print(' Sequence Number : ' + str(sequence))
			print(' Acknowledgement : ' + str(acknowledgement))
			print(' TCP header length : ' + str(tcph_length))
			print('FLAGS: '+ str(tcph_flags))
			#if(tcph_flags &(1<<5)):
    		#	print ('URGENT FLAG : 1')
    		#else:
      	 	#	print("URGENT FLAG : 0")
   			#if(tcph_flags &(1<<4)):
       		#	print("ACKNOWLEDGEMENT FLAG : 1")
    		#else:
        	#	print("ACKNOWLEDGEMENT FLAG : 0")
    		#if(tcph_flags &(1<<3)):
        	#	print("PUSH FLAG : 1")
    		#else:
        	#	print("PUSH FLAG : 0")
    		#if(tcph_flags &(1<<2)):
        	#	print("RESET FLAG : 1")
    		#else:
        	#	print("RESET FLAG : 0")
    		#if(tcph_flags &(1<<1)):
        	#	print("SYN FLAG : 1")
    		#else:
        	#	print("SYN FLAG : 0")
    		#if(tcph_flags &(1<<0)):
        	#	print("FINISH FLAG : 1")
    		#else:
        	#	print("FINISH FLAG : 0)
    		#print("--------------------------------------------")
			h_size = eth_length + iph_length + tcph_length * 4
			data_size = len(packet) - h_size
			

			data = packet[h_size:]
			
			print ('Data : ' + data)


		elif protocol == 1 :
			u = iph_length + eth_length
			icmph_length = 4
			icmp_header = packet[u:u+4]


			icmph = unpack('!BBH' , icmp_header)
			
			icmp_type = icmph[0]
			code = icmph[1]
			checksum = icmph[2]
			print('=======Cabecera ICMP==========0')
			print ('Type : ' + str(icmp_type))
			print(' Code : ' + str(code))
			print(' Checksum : ' + str(checksum))
			h_size = eth_length + iph_length + icmph_length
			data_size = len(packet) - h_size
			

			data = packet[h_size:]
			
			print ('Data : ' + data)


		elif protocol == 17 :
			u = iph_length + eth_length
			udph_length = 8
			udp_header = packet[u:u+8]


			udph = unpack('!HHHH' , udp_header)
			
			source_port = udph[0]
			dest_port = udph[1]
			length = udph[2]
			checksum = udph[3]
			print('===========Cabecera UDP==============')
			print ('Source Port : ' + str(source_port))
			print(' Dest Port : ' + str(dest_port))
			print(' Length : ' + str(length))
			print(' Checksum : ' + str(checksum))
			h_size = eth_length + iph_length + udph_length
			data_size = len(packet) - h_size
			

			data = packet[h_size:]
			
			print ('Data : ' + data)


		else :
			print ('Protocol other than TCP/UDP/ICMP')
			
		print('')
